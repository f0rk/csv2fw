#!/usr/bin/env python

import argparse
import csv
import datetime
import os
import re
import signal
import sys
from decimal import Decimal, InvalidOperation


# without this, we may encounter fields larger than can be read
csv.field_size_limit(sys.maxsize)


class XLSXReader(object):

    headers = None

    def __init__(self, fileobj):
        from openpyxl import load_workbook
        self.wb = load_workbook(fileobj, read_only=True, data_only=True)
        self.ws = self.wb.active

    def __iter__(self):

        for row in self.ws.rows:

            if self.headers is None:
                self.headers = []
                for cell in row:
                    self.headers.append(cell.value)
                continue

            values = [c.value for c in row]
            values = values[:len(self.headers)]
            while len(values) < len(self.headers):
                values.append(None)

            yield dict(zip(self.headers, values))


def _extract_number(val):

    if isinstance(val, (int, float, Decimal)):
        return Decimal(val)

    val = str(val)
    val = re.sub(r'([$,%]|\s)', "", val)

    if val == "-":
        val = "0"

    if re.search(r'^\(\d+(\.\d+)?\)$', val):
        val = "-" + re.sub(r'[()]', "", val)

    try:
        return Decimal(val)
    except InvalidOperation:
        raise InvalidOperation(val)


def _extract_datetime(val):

    if isinstance(val, datetime.datetime):
        return val

    if isinstance(val, int):
        val = str(val)
        if not val.startswith("20"):
            raise ValueError(
                "Year must begin with 20 (value was {!r})"
                .format(val)
            )

        if len(val) != 8:
            raise ValueError(
                "When parsing an integer as a date, it must have length 8, not "
                "{} (value was {!r})"
                .format(len(val), val)
            )

        return _extract_datetime(str(val))

    formats = [
        "%Y%m%d",
        "%m/%d/%Y",
        "%m/%d/%y",
        "%Y-%m-%d",
        "%Y-%m-%dT%H:%M:%S%z",
        "%Y-%m-%dT%H:%M:%S",
        "%Y-%m-%dT%H:%M:%S.%f%z",
        "%Y-%m-%dT%H:%M:%S.%f",
    ]

    for strptime_format in formats:
        try:
            return datetime.datetime.strptime(val, strptime_format)
        except ValueError:
            pass

    raise ValueError("Unable to parse date {!r}".format(val))


class Cut(object):

    def __init__(self, name=None, start=None, end=None, format=None):
        self.name = name
        self.start = start
        self.end = end
        self.format = format

    def __repr__(self):
        return "Cut(name={!r}, start={!r}, end={!r}, format={!r})".format(
            self.name,
            self.start,
            self.end,
            self.format,
        )

    def serialize(self, value, length):

        # consider the empty string to be null basically and attempt no further
        # transformations
        if value == "":
            return value

        # None is definitely null
        if value is None:
            return ""

        if self.format is not None:

            # signed overpunch
            format_match = re.search(r'^s9[(](\d+)[)](v9[(](\d+)[)])?$', self.format, flags=re.I)
            if format_match is not None:

                if format_match.groups()[1] is None:
                    decimals = 0
                else:
                    decimals = int(format_match.groups()[2])

                parsed = _extract_number(value)

                import overpunch
                value = overpunch.format(parsed, decimals=decimals)

                value = "{}".format(value).zfill(length)
                return value

            # signed overpunch v2
            format_match = re.search(r'^s9[(](\d+)[)]v(9+)$', self.format, flags=re.I)
            if format_match is not None:

                decimals = len(format_match.groups()[1])

                parsed = _extract_number(value)

                import overpunch
                value = overpunch.format(parsed, decimals=decimals)

                value = "{}".format(value).zfill(length)
                return value

            # implicit decimal point
            format_match = re.search(r'^9[(](\d+)[)]v9[(](\d+)[)]$', self.format, flags=re.I)
            if format_match is not None:

                parsed = _extract_number(value)
                value = "{}".format(value)

                if "." in value:
                    value_digits, value_decimals = value.split(".")
                else:
                    value_digits = value
                    value_decimals = ""

                decimals = int(format_match.groups()[1])
                if decimals == 0:
                    value = value_digits.zfill(length)
                else:
                    value_decimals = value_decimals[:decimals].ljust(decimals, "0")
                    value = value_digits + value_digits
                    value = value.zfill(length)
                return value

            # implicit decimal point v2
            format_match = re.search(r'^9[(](\d+)[)]v(9+)$', self.format, flags=re.I)
            if format_match is not None:

                parsed = _extract_number(value)
                value = "{}".format(value)

                if "." in value:
                    value_digits, value_decimals = value.split(".")
                else:
                    value_digits = value
                    value_decimals = ""

                decimals = len(format_match.groups()[1])
                if decimals == 0:
                    value = value_digits.zfill(length)
                else:
                    value_decimals = value_decimals[:decimals].ljust(decimals, "0")
                    value = value_digits + value_digits
                    value = value.zfill(length)
                return value

            # a different implied decimal point format
            format_match = re.search(r'^N\s?[(](\d+).(\d+)[)]$', self.format)
            if format_match is not None:

                parsed = _extract_number(value)
                value = "{}".format(value)

                if "." in value:
                    value_digits, value_decimals = value.split(".")
                else:
                    value_digits = value
                    value_decimals = ""

                decimals = int(format_match.groups()[1])
                if decimals == 0:
                    value = value_digits.zfill(length)
                else:
                    value_decimals = value_decimals[:decimals].ljust(decimals, "0")
                    value = value_digits + value_digits
                    value = value.zfill(length)
                return value

            # date handling, format is strptime, output is YYYYMMDD
            format_match = re.search(r'^D[(](.+)[)]$', self.format)
            if format_match is not None:

                value = _extract_datetime(value)

                format_specifier = format_match.groups()[0]

                if format_specifier in ("CCYYMMDD", "YYYYMMDD"):
                    format_specifier = "%Y%m%d"
                elif format_specifier == "CCYYDDD":
                    format_specifier = "%Y%j"
                elif format_specifier == "YYYYDDD":
                    format_specifier = "%Y%j"
                elif format_specifier == "JULIAN":
                    format_specifier = "%Y%j"
                elif format_specifier == "YYDDD":
                    format_specifier = "%y%j"
                elif format_specifier == "MMDDYYYY":
                    format_specifier = "%m%d%Y"
                elif format_specifier == "MMDDYY":
                    format_specifier = "%m%d%y"
                elif format_specifier == "MMDDYY":
                    format_specifier = "%m%d%y"

                # unknown format? hopefully it is strftime compatible
                value = value.strftime(format_specifier)
                return value

        return value


class Converter(object):

    def __init__(self, cuts_path, truncate=False, name_overrides=None):

        if name_overrides is None:
            name_overrides = []

        self.truncate = truncate
        self.cuts = []

        if cuts_path.endswith(".csv") or cuts_path.endswith(".xlsx"):
            if cuts_path.endswith(".csv"):
                cfp = open(cuts_path, "r")
                reader = csv.DictReader(cfp)
            elif cuts_path.endswith(".xlsx"):
                cfp = open(cuts_path, "rb")
                reader = XLSXReader(cfp)

            name_key = None
            end_key = None
            format_key = None

            for field, field_name in name_overrides:
                if field == "name":
                    name_key = field_name
                elif field == "end":
                    end_key = field_name
                elif field == "format":
                    format_key = field_name
                else:
                    raise ValueError(
                        "Unable to handle field name override {!r} (must be "
                        "one of 'name', 'end', or 'format')"
                        .format(field)
                    )

            for row in reader:
                if name_key is None:

                    name_options = [
                        "name",
                        "Field Name",
                    ]

                    name_key = self._get_key_for_name(
                        row,
                        "name",
                        name_options,
                    )

                if end_key is None:

                    end_options = [
                        "end",
                        "End",
                        "To POS",
                        "Field Location To",
                        "Positions",
                    ]

                    end_key = self._get_key_for_name(
                        row,
                        "end",
                        end_options,
                    )

                if format_key is None:

                    format_options = [
                        "format",
                        "Format",
                        "Type",
                        "Field Type",
                        "Field Format",
                    ]

                    format_key = self._get_key_for_name(
                        row,
                        "format",
                        format_options,
                        missing_ok=True,
                    )

                name = row.get(name_key)

                if not name:
                    continue

                raw_end = row.get(end_key)
                if raw_end is not None:
                    raw_end = str(raw_end)

                # allow position to be specified with a range
                if raw_end is not None:
                    if "-" in raw_end:
                        _, raw_end = raw_end.split("-")

                end = int(raw_end)
                format = row.get(format_key)

                cut = Cut(name=name, end=end, format=format)
                self.cuts.append(cut)

        else:
            cfp = open(cuts_path, "r")

            for line in cfp:
                line = line.strip()

                try:
                    name, end = re.split(r'\s+', line)

                    cut = Cut(name=name, end=int(end))
                    self.cuts.append(cut)

                except TypeError:
                    cut = Cut(name=line, end=None)
                    self.cuts.append(cut)
                except ValueError:
                    cut = Cut(name=line, end=None)
                    self.cuts.append(cut)

    def _get_key_for_name(self, row, name, options, missing_ok=False):
        for option in options:
            if option in row:
                return option

        if not missing_ok:
            raise ValueError("Unable to determine key for '{}'".format(name))

    @property
    def fields(self):
        return [v.name for v in self.cuts]

    def process(self, fp):
        if fp == "-":
            fp = sys.stdin
        elif isinstance(fp, str):
            fp = open(fp, "r")
        elif isinstance(fp, int):
            fp = os.fdopen(fp, "r")

        reader = csv.DictReader(fp)
        for record in reader:
            yield self.unsplit(record)

    def unsplit(self, record):
        values = []
        start = 0
        for cut in self.cuts:

            value = record.get(cut.name)

            length = cut.end - start

            value = cut.serialize(value, length)

            if len(value) > length:
                if self.truncate:
                    value = value[:length]
                else:
                    raise Exception("value '{}' for field '{}' exceeds "
                                    "size (max {}, value length {})"
                                    .format(value, cut.name, length, len(value)))

            value = ("{:<" + str(length) + "}").format(value)
            values.append(value)

            start = cut.end

        return "".join(values)


if __name__ == "__main__":

    # ignore pipe errors using head, etc
    signal.signal(signal.SIGPIPE, signal.SIG_DFL) 

    parser = argparse.ArgumentParser()
    parser.add_argument("--truncate", help="truncate values that are too long",
                        action="store_true", default=False)
    parser.add_argument(
        "--override",
        dest="overrides",
        action="append",
        nargs=1,
        metavar=("field=N",),
        help=(
            "manual field name specifications to override defaults. use "
            "--override 'name=The Name' to specify"
        ),
    )
    parser.add_argument("cuts", help="path to the cuts file")
    parser.add_argument("files", nargs="*", help="files to process")

    args = parser.parse_args()

    if not args.files:
        args.files = ["-"]

    name_overrides = []
    if args.overrides:
        for raw_override in args.overrides:

            override = raw_override[0]

            match = re.search(r'^(name|end|format)=(.+)$', override)

            if match is None:
                sys.stderr.write(
                    "override {!r} is not valid. specify one of name, end, or "
                    "format followed by an equal sign and the corresponding "
                    "header name in the csv or excel cuts specification.\n"
                    .format(override)
                )
                sys.exit(1)

            name_overrides.append((match.groups()[0], match.groups()[1]))

    converter = Converter(args.cuts, truncate=args.truncate)

    for file in args.files:
        for line in converter.process(file):
            sys.stdout.write(line + "\n")

